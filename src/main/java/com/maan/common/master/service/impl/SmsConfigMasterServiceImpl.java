/*
*  Copyright (c) 2019. All right reserved
* Created on 2021-11-19 ( Date ISO 2021-11-19 - Time 13:16:54 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.common.master.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import com.maan.common.error.Error;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.common.bean.SmsConfigMaster;
import com.maan.common.master.request.SmsConfigMasterReq;
import com.maan.common.master.response.SmsConfigMasterRes;
import com.maan.common.master.response.sucessRes;
import com.maan.common.master.service.SmsConfigMasterService;
import com.maan.common.repository.SmsConfigMasterRepository;
/**
* <h2>SmsConfigMasterServiceimpl</h2>
*/
@Service
@Transactional
public class SmsConfigMasterServiceImpl implements SmsConfigMasterService {

@Autowired
private SmsConfigMasterRepository repository;


private Logger log=LogManager.getLogger(SmsConfigMasterServiceImpl.class);
/*
public SmsConfigMasterServiceImpl(SmsConfigMasterRepository repo) {
this.repository = repo;
}

  */
 @Override
    public SmsConfigMaster create(SmsConfigMaster d) {

       SmsConfigMaster entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public SmsConfigMaster update(SmsConfigMaster d) {
        SmsConfigMaster c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public SmsConfigMaster getOne(long id) {
        SmsConfigMaster t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }

*/
    @Override
    public List<SmsConfigMaster> getAll() {
        List<SmsConfigMaster> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }


	@Override
	public List<SmsConfigMasterRes> getsmsconfigmaster(SmsConfigMasterReq req) {

		List<SmsConfigMasterRes> reslist = new ArrayList<SmsConfigMasterRes>();
		try {

			List<SmsConfigMaster> entlist = repository.findByInsId(req.getInsId()); 

			for (SmsConfigMaster SmsConfigMaster : entlist) {

				ModelMapper modelMapper = new ModelMapper();
				SmsConfigMasterRes res = modelMapper.map(SmsConfigMaster, SmsConfigMasterRes.class);

				reslist.add(res);
			}

		} catch (Exception ex) {
			log.error(ex);
			reslist = null;
		}
		return reslist;

	}


	@Override
	public SmsConfigMasterRes getsmsconfigmasterid(SmsConfigMasterReq req) {

		SmsConfigMasterRes res = new SmsConfigMasterRes();
		try {

			Optional<SmsConfigMaster> ent = repository.findById(req.getInsId());
			ModelMapper modelMapper = new ModelMapper();
			res = modelMapper.map(ent.get(), SmsConfigMasterRes.class);

		} catch (Exception ex) {
			log.error(ex);
			res = null;
		}
		return res;

	}


	@Override
	public sucessRes insertsmsconfigmaster(SmsConfigMasterReq req) {

		sucessRes res = new sucessRes();
		try {

			Optional<SmsConfigMaster> SmsConfigMaster = repository.findById(req.getInsId());

			if (SmsConfigMaster.isPresent()) {

				ModelMapper modelMapper = new ModelMapper();
				SmsConfigMaster ent = modelMapper.map(req, SmsConfigMaster.class);
				ent.setAmendid( SmsConfigMaster.get().getAmendid().add(new BigDecimal("1"))  );
				ent.setEffectiveDate(req.getEffectiveDate());
				ent.setEntrydate(ent.getEntrydate());
				repository.save(ent);
				res.setResponse("Updated SucessFully");
			} else {

				ModelMapper modelMapper = new ModelMapper();
				SmsConfigMaster ent = modelMapper.map(req, SmsConfigMaster.class);
				ent.setAmendid(new BigDecimal("0"));
				ent.setEffectiveDate(req.getEffectiveDate());
				ent.setEntrydate(new Date());
				repository.save(ent);
				res.setResponse("Inserted SucessFully");
			}
		} catch (Exception ex) {
			log.error(ex);
			res = null;
		}
		return res;

	}


	@Override
	public List<Error> validation(SmsConfigMasterReq req) {
		
		List<Error> errorList = new ArrayList<Error>();

		try {
			if (req.getRemarks() == null || StringUtils.isBlank(req.getRemarks()) ) {
				errorList.add(new Error("01", "Remarks", "Please Enter Remarks"));
			}
			if ( req.getStatus() == null || StringUtils.isBlank(req.getStatus()) ) {
				errorList.add(new Error("02", "Status", "Please Enter Status"));
			}
			if ( req.getInsId() == null  || StringUtils.isBlank(req.getInsId().toString())) {
				errorList.add(new Error("03", "InsId", "Please Enter InsId"));
			}
			if (  req.getSmsPartyUrl() == null || StringUtils.isBlank(req.getSmsPartyUrl())) {
				errorList.add(new Error("04", "SmsPartyUrl", "Please Enter SmsPartyUrl"));
			}
			if ( req.getSmsUserName() == null || StringUtils.isBlank(req.getSmsUserName()) ) {
				errorList.add(new Error("05", "SmsUserName", "Please Enter SmsUserName"));
			}
			if (req.getSmsUserPass() == null || StringUtils.isBlank(req.getSmsUserPass()) ) {
				errorList.add(new Error("06", "SmsUserPass", "Please Enter SmsUserPass"));
			}
			if ( req.getSecureYn() == null || StringUtils.isBlank(req.getSecureYn()) ) {
				errorList.add(new Error("07", "SecureYn", "Please Enter SecureYn"));
			}
			if ( req.getSenderid() == null || StringUtils.isBlank(req.getSenderid()) ) {
				errorList.add(new Error("08", "Senderid", "Please Enter Senderid"));
			}
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DATE, -1);
			Date yserteday = cal.getTime();
			if (req.getEffectiveDate() == null || StringUtils.isBlank(req.getEffectiveDate().toString())) {
				errorList.add(new Error("09", "EffectiveDate", "Please Enter EffectiveDate"));
			}else if (req.getEffectiveDate().after(yserteday)) {
				errorList.add(new Error("06", "EffectiveDate", "Please Enter Future Date as EffectiveDate"));
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

}
