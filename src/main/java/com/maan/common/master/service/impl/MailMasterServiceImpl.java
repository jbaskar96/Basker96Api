/*
*  Copyright (c) 2019. All right reserved
* Created on 2021-07-31 ( Date ISO 2021-07-31 - Time 18:13:33 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.common.master.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import com.maan.common.error.Error;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.validator.routines.EmailValidator;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.common.bean.MailMaster;
import com.maan.common.bean.MailMasterId;
import com.maan.common.master.request.MailMasterReq;
import com.maan.common.master.response.MailMasterRes;
import com.maan.common.master.response.sucessRes;
import com.maan.common.master.service.MailMasterService;
import com.maan.common.repository.MailMasterRepository;
/**
* <h2>MailMasterServiceimpl</h2>
*/
@Service
@Transactional
public class MailMasterServiceImpl implements MailMasterService {

@Autowired
private MailMasterRepository repository;


private Logger log=LogManager.getLogger(MailMasterServiceImpl.class);
/*
public MailMasterServiceImpl(MailMasterRepository repo) {
this.repository = repo;
}

  */
 @Override
    public MailMaster create(MailMaster d) {

       MailMaster entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public MailMaster update(MailMaster d) {
        MailMaster c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public MailMaster getOne(long id) {
        MailMaster t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }

*/
    @Override
    public List<MailMaster> getAll() {
        List<MailMaster> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }


	@Override
	public List<MailMasterRes> getmailmaster(MailMasterReq req) {

		List<MailMasterRes> reslist = new ArrayList<MailMasterRes>();
		try {

			List<MailMaster> entlist = repository.findByInsCompanyId(req.getInsCompanyId());

			for (MailMaster MailMaster : entlist) {

				ModelMapper modelMapper = new ModelMapper();
				MailMasterRes res = modelMapper.map(MailMaster, MailMasterRes.class);

				reslist.add(res);
			}

		} catch (Exception ex) {
			log.error(ex);
			reslist = null;
		}
		return reslist;

	}


	@Override
	public MailMasterRes getmailmasterid(MailMasterReq req) {

		MailMasterRes res = new MailMasterRes();
		try {
			MailMasterId id = new MailMasterId();
			 id.setApplicationId(req.getApplicationId());
			 id.setInsCompanyId(new BigDecimal(req.getApplicationId() ));
			 
			Optional<MailMaster> ent = repository.findById(id);

			ModelMapper modelMapper = new ModelMapper();
			res = modelMapper.map(ent.get(), MailMasterRes.class);

		} catch (Exception ex) {
			log.error(ex);
			res = null;
		}
		return res;

	}


	@Override
	public sucessRes insertmailmaster(MailMasterReq req) {

		sucessRes res = new sucessRes();
		try {
			MailMasterId id = new MailMasterId();
			 id.setApplicationId(req.getApplicationId());
			 id.setInsCompanyId(new BigDecimal(req.getApplicationId() ));
			 
			Optional<MailMaster> MailMaster = repository.findById(id);

			if (MailMaster.isPresent()) {

				ModelMapper modelMapper = new ModelMapper();
				MailMaster ent = modelMapper.map(req, MailMaster.class);
				repository.save(ent);
				res.setResponse("Updated SucessFully");
			} else {

				ModelMapper modelMapper = new ModelMapper();
				MailMaster ent = modelMapper.map(req, MailMaster.class);
				repository.save(ent);
				res.setResponse("Inserted SucessFully");
			}
		} catch (Exception ex) {
			log.error(ex);
			res = null;
		}
		return res;

	}


	@Override
	public List<Error> validation(MailMasterReq req) {
		
		List<Error> errorList = new ArrayList<Error>();

		try {
			if (req.getRemarks() == null || StringUtils.isBlank(req.getRemarks())) {
				errorList.add(new Error("01", "Remarks", "Please Enter Remarks"));
			}
			if (req.getStatus() == null || StringUtils.isBlank(req.getStatus())) {
				errorList.add(new Error("02", "Status", "Please Enter Status"));
			}
			if (req.getToAddress() == null || StringUtils.isBlank(req.getToAddress())) {
				errorList.add(new Error("03", "ToAddress", "Please Enter ToAddress"));
			}
			if (req.getSmtpPort() == null || StringUtils.isBlank(req.getSmtpPort().toString())) {
				errorList.add(new Error("04", "SmtpPort", "Please Enter SmtpPort"));
			}
			if (req.getSmtpHost() == null || StringUtils.isBlank(req.getSmtpHost())) {
				errorList.add(new Error("05", "SmtpHost", "Please Enter SmtpHost"));
			}
			if (req.getSmtpPwd() == null || StringUtils.isBlank(req.getSmtpPwd())) {
				errorList.add(new Error("06", "SmtpPwd", "Please Enter SmtpPwd"));
			}
			if (req.getSmtpUser() == null || StringUtils.isBlank(req.getSmtpUser())) {
				errorList.add(new Error("07", "SmtpUser", "Please Enter SmtpUser"));
			}
			if (req.getAuthorizYn() == null || StringUtils.isBlank(req.getAuthorizYn())) {
				errorList.add(new Error("08", "AuthorizYn", "Please Enter AuthorizYn"));
			}
			
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DATE, -1);
			java.util.Date yserteday = cal.getTime();
			if (req.getEffectiveDate() == null || StringUtils.isBlank(req.getEffectiveDate().toString())) {
				errorList.add(new Error("09", "EffectiveDate", "Please Enter EffectiveDate"));
			}else if (req.getEffectiveDate().before(yserteday)) {
				errorList.add(new Error("09", "EffectiveDate", "Please Enter Future Date as EffectiveDate"));
			}
			
			if (req.getMailCc() == null || StringUtils.isBlank(req.getMailCc())) {
				errorList.add(new Error("10", "MailCc", "Please Enter MailCc"));
			}else {
				List<String> list = new ArrayList<String>();
				list = Arrays.asList(req.getMailCc().split(","));
				for (String string : list) {
					boolean valid = EmailValidator.getInstance().isValid(string);
					if(!valid)
						errorList.add(new Error("10", "MailCc", "Please enter valid MailId for "+string ));
				}
				
			}
			
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
		
	}

}
